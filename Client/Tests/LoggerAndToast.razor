@page "/Test/LoggerAndToast"
@using Client.Tests.Enums

<Client.Tests.Components.PageHeader NavTest="NavTest.LoggerAndToast" />

@inject ILogger<LoggerAndToast>? Logger 
@inject IToastService? Toast

<div class="card">
	<div class="card-header">Test Logging (and Toast)</div>

	<ul class="list-group list-group-flush">

		<li class="list-group-item">
			<button @onclick="@(e => ThrowException_ButtonClick())"
							class="list-group-item list-group-item-warning">
				<b>Throw Exception</b>
				<i class="fas fa-chevron-right"></i>
			</button>
		</li>
	</ul>
</div>

@code {
	protected override void OnInitialized()
	{
		Logger!.LogInformation("Inside {Class}!{Method}", nameof(LoggerAndToast), nameof(OnInitializedAsync));
	}

	void ThrowException_ButtonClick()
	{
		//Logger!.LogDebug(string.Format("Inside {0}", nameof(LoggerAndToast) + "!" + nameof(ThrowException_ButtonClick)));
		Logger!.LogWarning(string.Format("Inside {0}", nameof(LoggerAndToast) + "!" + nameof(ThrowException_ButtonClick)));
		try
		{
			for (int i = 0; i < 10; i++)
			{
				if (i == 5)
				{
					throw new Exception("This is our demo exception");
				}
				else
				{
					//Logger!.LogDebug($"The value of i is {i}");
					Logger!.LogWarning($"The value of i is {i}");
				}
			}

		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "...Exception thrown");
			Toast!.ShowError("...Exception thrown, see the Console in your Browsers Developer Tools");
		}
	}
}
