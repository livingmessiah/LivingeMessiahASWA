@page "/weather"
@inject HttpClient Http

@using Client;
@using Page = Client.Enums.Nav
@using Status = Client.Enums.LoadingStatusEnum

<PageTitle>@Page.Weather.Title</PageTitle>

	<div class="pb-1 mt-4 mb-2 border-bottom border-info">
		<h2><i class="@Page.Weather.Icon"></i> @Page.Weather.Title</h2>
</div>


@switch (_status)
{
	case Status.Loading:
		<p class="text-info"><em>Loading...</em></p>
		break;

	case Status.Loaded:
		<p class="text-warning"><em>@_msg</em></p>
		break;

	case Status.EmptyList:

		<table class="table">
			<thead>
				<tr>
					<th>Date</th>
					<th>Temp. (C)</th>
					<th>Temp. (F)</th>
					<th>Summary</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
			</tbody>
		</table>

		<p class="text-warning"><em>@_msg</em></p>
		break;


	case Status.ListHasData:
		<p class="text-success"><em>@_msg</em></p>
		<table class="table">
			<thead>
				<tr>
					<th>Date</th>
					<th>Temp. (C)</th>
					<th>Temp. (F)</th>
					<th>Summary</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var forecast in forecasts!)
				{
					<tr>
						<td>@forecast.Date.ToShortDateString()</td>
						<td>@forecast.TemperatureC</td>
						<td>@forecast.TemperatureF</td>
						<td>@forecast.Summary</td>
					</tr>
				}
			</tbody>
		</table>

		break;

	case Status.Error:
		<p class="text-danger"><em>Could not load because of an Error</em></p>
		<p class="p-2">@_msg</p>
		break;

	default:
		break;

}



@code {
	//private WeatherForecast[]? forecasts;
	private WeatherForecast[]? forecasts = Array.Empty<WeatherForecast>();

	protected Status _status = Status.Loading;
	protected string _msg = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		//forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
		try
		{
			forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("/api/WeatherForecast") ?? new WeatherForecast[] { };
			if (forecasts!.Any())
			{
				_status = Status.ListHasData;
				_msg = $"Row Count: {forecasts!.Count()}";
			}
			else
			{
				_status = Status.EmptyList;
				_msg = "Row is not null, but empty";
			}
		}
		catch (Exception ex)
		{
			_status = Status.Error;
			_msg = $"Error calling forecasts, inside {nameof(OnInitializedAsync)}, Error: {ex.ToString()}";
			Console.WriteLine(ex.ToString());
		}
	}

}
